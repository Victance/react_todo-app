{"version":3,"sources":["api/todos.ts","components/Menu.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTodos","fetch","then","response","json","deleteTodo","todoId","method","patch","url","data","headers","body","JSON","stringify","toggleTodoStatus","completed","getActiveClasses","status","classNames","selected","isActive","Menu","itemsLeft","todos","setTodos","handleClearCompleted","a","Promise","all","filter","todo","map","newTodo","id","className","to","length","type","onClick","TodoItem","useState","editStatus","setEdit","newTitle","setNewTitle","useEffect","title","handleDelete","handleClick","uploadTitle","editing","value","autoFocus","onBlur","onKeyDown","event","key","onChange","target","checked","role","TodoList","handleToggleAll","htmlFor","TodoApp","setTitle","pathname","useLocation","displayedTodos","handleSubmit","preventDefault","Math","max","userId","onSubmit","placeholder","App","path","element","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f74ea840.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Todo } from '../types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${BASE_URL}/todos?userId=30`)\n    .then(response => response.json());\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`,\n    {\n      method: 'DELETE',\n    });\n};\n\nexport const createTodo = (todo: Todo) => {\n  return fetch(`${BASE_URL}/todos`,\n    {\n      method: 'POST',\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n      body: JSON.stringify(todo),\n    }).then(response => response.json());\n};\n\nexport const patch = (url: string, data: any) => {\n  return fetch(url,\n    {\n      method: 'PATCH',\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n      body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nexport const toggleTodoStatus = (todoId: number, completed: boolean) => {\n  return patch(`${BASE_URL}/todos/${todoId}`, { completed });\n};\n\nexport const editTodoTitle = (todoId: number, title: string) => {\n  return patch(`${BASE_URL}/todos/${todoId}`, { title });\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { deleteTodo, getTodos } from '../api/todos';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  itemsLeft: number;\n  todos: Todo[];\n  setTodos: (value: Todo[]) => void;\n};\n\nconst getActiveClasses = (status: { isActive: boolean }) => classNames(\n  { selected: status.isActive },\n);\n\nexport const Menu:React.FC<Props> = ({ itemsLeft, todos, setTodos }) => {\n  const handleClearCompleted = async () => {\n    await Promise.all(todos.filter(todo => todo.completed)\n      .map(newTodo => deleteTodo(newTodo.id)));\n\n    getTodos().then(setTodos);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${itemsLeft} ${itemsLeft === 1 ? 'item' : 'items'} left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink\n            to=\"/\"\n            className={getActiveClasses}\n          >\n            All\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to=\"/active\"\n            className={getActiveClasses}\n          >\n            Active\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to=\"/completed\"\n            className={getActiveClasses}\n          >\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      {itemsLeft < todos.length && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","/* eslint-disable max-len */\n/* eslint-disable jsx-a11y/no-autofocus */\n/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line max-len\nimport {\n  deleteTodo, editTodoTitle, getTodos, toggleTodoStatus,\n} from '../api/todos';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  setTodos: (value: Todo[]) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo, setTodos }) => {\n  const [editStatus, setEdit] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  useEffect(() => {\n    setNewTitle(todo.title);\n  }, []);\n\n  const handleDelete = async () => {\n    await deleteTodo(todo.id);\n    getTodos().then(setTodos);\n  };\n\n  const handleClick = async () => {\n    await toggleTodoStatus(todo.id, !todo.completed);\n    getTodos().then(setTodos);\n  };\n\n  const uploadTitle = () => {\n    if (!newTitle.length) {\n      handleDelete();\n    }\n\n    setEdit(false);\n    editTodoTitle(todo.id, newTitle);\n    getTodos().then(setTodos);\n  };\n\n  const handleEnter = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && newTitle === todo.title) {\n      setEdit(false);\n    }\n\n    if (event.key === 'Enter') {\n      uploadTitle();\n    }\n\n    if (event.key === 'Escape') {\n      setEdit(false);\n      setNewTitle(todo.title);\n    }\n  };\n\n  const handleBlur = () => {\n    setEdit(false);\n\n    if (todo.title !== newTitle) {\n      uploadTitle();\n    }\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({\n          completed: todo.completed,\n          editing: editStatus,\n        })}\n      >\n        {editStatus\n          ? (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              value={newTitle}\n              autoFocus\n              onBlur={handleBlur}\n              onKeyDown={handleEnter}\n              onChange={(event) => {\n                setNewTitle(event.target.value);\n              }}\n            />\n          ) : (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={todo.completed}\n                id={`${todo.id}`}\n                onChange={handleClick}\n\n              />\n              <label\n                role=\"presentation\"\n                onClick={() => {\n                  setEdit(true);\n                }}\n              >\n                {newTitle}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                data-cy=\"deleteTodo\"\n                onClick={handleDelete}\n              />\n            </div>\n          )}\n      </li>\n\n    </>\n  );\n};\n","import { getTodos, toggleTodoStatus } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  setTodos: (value: Todo[]) => void;\n  itemsLeft: number;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setTodos, itemsLeft }) => {\n  const handleToggleAll = async () => {\n    if (itemsLeft === 0 || itemsLeft === todos.length) {\n      await Promise.all(todos.map(todo => (\n        toggleTodoStatus(todo.id, !todo.completed)\n      )));\n    }\n\n    if (itemsLeft < todos.length) {\n      await Promise.all(todos.filter(todo => !todo.completed)\n        .map(newTodo => toggleTodoStatus(newTodo.id, !newTodo.completed)));\n    }\n\n    getTodos().then(setTodos);\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        checked={itemsLeft === 0}\n        onChange={handleToggleAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\" data-cy=\"todoList\">\n        {todos.map(todo => (\n          <TodoItem todo={todo} key={todo.id} setTodos={setTodos} />\n        ))}\n      </ul>\n\n    </section>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { createTodo, getTodos } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { Menu } from './Menu';\nimport { TodoList } from './TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const findMaxId = () => {\n    return Math.max(...todos.map(todo => todo.id));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.length) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      title,\n      id: findMaxId() + 1,\n      userId: 30,\n      completed: false,\n    };\n\n    await createTodo(newTodo);\n\n    getTodos().then(setTodos);\n\n    setTitle('');\n  };\n\n  const itemsLeft = todos.filter(todo => !todo.completed).length;\n\n  let displayedTodos;\n\n  switch (pathname) {\n    case '/active':\n      displayedTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case '/completed':\n      displayedTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      displayedTodos = todos;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      {todos.length > 0 && (\n        <Menu\n          todos={displayedTodos}\n          itemsLeft={itemsLeft}\n          setTodos={setTodos}\n        />\n      )}\n\n      <header className=\"header\">\n        <h1>To-Dos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            data-cy=\"createTodo\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <TodoList\n        todos={displayedTodos}\n        setTodos={setTodos}\n        itemsLeft={itemsLeft}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  HashRouter as Router, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<TodoApp />}>\n          <Route path=\":active\" element={<TodoApp />} />\n          <Route path=\":completed\" element={<TodoApp />} />\n        </Route>\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"*\" element={<h1>Page not found</h1>} />\n      </Routes>\n    </Router>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}