{"version":3,"sources":["api/todos.ts","components/Footer.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTodos","fetch","then","response","json","deleteTodo","todoId","method","patch","url","data","headers","body","JSON","stringify","toggleTodoStatus","completed","Footer","itemsLeft","todos","setTodos","handleClearCompleted","a","Promise","all","filter","todo","map","newTodo","id","className","href","length","type","onClick","TodoItem","useState","editStatus","setEdit","newTitle","setNewTitle","useEffect","title","handleDelete","handleClick","uploadTitle","classNames","editing","value","autoFocus","onBlur","onKeyDown","event","key","onChange","target","checked","role","TodoList","handleToggleAll","htmlFor","TodoApp","setTitle","handleSubmit","preventDefault","Math","max","userId","onSubmit","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b06607e7.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Todo } from '../types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${BASE_URL}/todos?userId=30`)\n    .then(response => response.json());\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`,\n    {\n      method: 'DELETE',\n    });\n};\n\nexport const createTodo = (todo: Todo) => {\n  return fetch(`${BASE_URL}/todos`,\n    {\n      method: 'POST',\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n      body: JSON.stringify(todo),\n    }).then(response => response.json());\n};\n\nexport const patch = (url: string, data: any) => {\n  return fetch(url,\n    {\n      method: 'PATCH',\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n      body: JSON.stringify(data),\n    }).then(response => response.json());\n};\n\nexport const toggleTodoStatus = (todoId: number, completed: boolean) => {\n  return patch(`${BASE_URL}/todos/${todoId}`, { completed });\n};\n\nexport const editTodoTitle = (todoId: number, title: string) => {\n  return patch(`${BASE_URL}/todos/${todoId}`, { title });\n};\n","import { deleteTodo, getTodos } from '../api/todos';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  itemsLeft: number;\n  todos: Todo[];\n  setTodos: (value: Todo[]) => void;\n};\n\nexport const Footer:React.FC<Props> = ({ itemsLeft, todos, setTodos }) => {\n  const handleClearCompleted = async () => {\n    await Promise.all(todos.filter(todo => todo.completed)\n      .map(newTodo => deleteTodo(newTodo.id)));\n\n    getTodos().then(setTodos);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${itemsLeft} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a href=\"#/\" className=\"selected\">All</a>\n        </li>\n\n        <li>\n          <a href=\"#/active\">Active</a>\n        </li>\n\n        <li>\n          <a href=\"#/completed\">Completed</a>\n        </li>\n      </ul>\n\n      {itemsLeft < todos.length && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/no-autofocus */\n/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line max-len\nimport {\n  deleteTodo, editTodoTitle, getTodos, toggleTodoStatus,\n} from '../api/todos';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  setTodos: (value: Todo[]) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo, setTodos }) => {\n  const [editStatus, setEdit] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  useEffect(() => {\n    setNewTitle(todo.title);\n  }, []);\n\n  const handleDelete = async () => {\n    await deleteTodo(todo.id);\n    getTodos().then(setTodos);\n  };\n\n  const handleClick = async () => {\n    await toggleTodoStatus(todo.id, !todo.completed);\n    getTodos().then(setTodos);\n  };\n\n  const uploadTitle = async () => {\n    if (!newTitle.length) {\n      handleDelete();\n    }\n\n    setEdit(false);\n    editTodoTitle(todo.id, newTitle);\n    getTodos().then(setTodos);\n  };\n\n  const handleEnter = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && todo.title === newTitle) {\n      setEdit(false);\n    }\n\n    if (event.key === 'Enter') {\n      uploadTitle();\n    }\n  };\n\n  const handleBlur = () => {\n    setEdit(false);\n\n    if (todo.title === newTitle) {\n      return;\n    }\n\n    uploadTitle();\n  };\n\n  return (\n    <>\n      <li\n        className={classNames({\n          completed: todo.completed,\n          editing: editStatus,\n        })}\n      >\n        {editStatus\n          ? (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              value={newTitle}\n              autoFocus\n              onBlur={handleBlur}\n              onKeyDown={handleEnter}\n              onChange={(event) => {\n                setNewTitle(event.target.value);\n              }}\n            />\n          ) : (\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={todo.completed}\n                id={`${todo.id}`}\n                onChange={handleClick}\n\n              />\n              <label\n                role=\"presentation\"\n                onClick={() => {\n                  setEdit(true);\n                }}\n              >\n                {newTitle}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                data-cy=\"deleteTodo\"\n                onClick={handleDelete}\n              />\n            </div>\n          )}\n      </li>\n\n    </>\n  );\n};\n// <li className=\"editing\">\n//   <div className=\"view\">\n//     {/* <input type=\"checkbox\" className=\"toggle\" id=\"toggle-editing\" />\n//     <label htmlFor=\"toggle-editing\">zxcvbnm</label> */}\n//     <button type=\"button\" className=\"destroy\" data-cy=\"deleteTodo\" />\n//   </div>\n//   <input type=\"text\" className=\"edit\" />\n// </li>\n","// import { useEffect } from 'react';\n// import { getTodos } from '../api/todos';\nimport { getTodos, toggleTodoStatus } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  setTodos: (value: Todo[]) => void;\n  itemsLeft: number;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setTodos, itemsLeft }) => {\n  const handleToggleAll = async () => {\n    if (itemsLeft === 0 || itemsLeft === todos.length) {\n      await Promise.all(todos.map(todo => (\n        toggleTodoStatus(todo.id, !todo.completed)\n      )));\n    }\n\n    if (itemsLeft < todos.length) {\n      await Promise.all(todos.filter(todo => !todo.completed)\n        .map(newTodo => toggleTodoStatus(newTodo.id, !newTodo.completed)));\n    }\n\n    getTodos().then(setTodos);\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        checked={itemsLeft > 0}\n        onChange={handleToggleAll}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\" data-cy=\"todoList\">\n        {todos.map(todo => (\n          <TodoItem todo={todo} key={todo.id} setTodos={setTodos} />\n        ))}\n      </ul>\n\n    </section>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { createTodo, getTodos } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { Footer } from './Footer';\nimport { TodoList } from './TodoList';\n\nexport const TodoApp: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const findMaxId = () => {\n    return Math.max(...todos.map(todo => todo.id));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.length) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      title,\n      id: findMaxId() + 1,\n      userId: 30,\n      completed: false,\n    };\n\n    await createTodo(newTodo);\n\n    getTodos().then(setTodos);\n\n    setTitle('');\n  };\n\n  const itemsLeft = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>To-Dos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            data-cy=\"createTodo\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <TodoList\n        todos={todos}\n        setTodos={setTodos}\n        itemsLeft={itemsLeft}\n      />\n\n      <Footer\n        todos={todos}\n        itemsLeft={itemsLeft}\n        setTodos={setTodos}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <TodoApp />\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}